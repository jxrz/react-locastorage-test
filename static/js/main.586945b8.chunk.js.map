{"version":3,"sources":["components/TaskCreator.js","components/TaskRow.js","components/TaskTable.js","components/VisibilityControl.js","App.js","index.js"],"names":["TaskCreator","_ref","createNewTask","_useState","useState","_useState2","Object","slicedToArray","newTaskName","setNewTaskName","react_default","a","createElement","onSubmit","e","preventDefault","className","type","placeholder","value","onChange","target","TaskRow","task","toggleTask","name","checked","done","TaskTable","doneValue","tasks","_ref$showCompleted","showCompleted","filter","map","TaskRow_TaskRow","key","VisibilityControl","isChecked","setShowCompleted","cleanTasks","onClick","window","confirm","App","tasksItems","setTasks","_useState3","_useState4","t","objectSpread","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","TaskCreator_TaskCreator","taskName","find","concat","toConsumableArray","TaskTable_TaskTable","VisibilityControl_VisibilityControl","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.586945b8.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport React from \"react\";\n\nexport const TaskCreator = ({ createNewTask }) => {\n\n    const [newTaskName, setNewTaskName] = useState(\"\");\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        createNewTask(newTaskName);\n        setNewTaskName(\"\");\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className=\"my-2 row\">\n            <div className=\"col-9\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter a new task\"\n                    value={newTaskName}\n                    onChange={(e) => setNewTaskName(e.target.value)}\n                    className=\"form-control\"\n                />\n            </div>\n\n            <div className=\"col-3\">\n                <button className=\"btn btn-primary btn-sm\">Add task</button>\n            </div>\n        </form>\n    );\n};\n","import React from \"react\";\n\nexport const TaskRow = ({ task, toggleTask }) => {\n    return (\n        <tr>\n            <td className=\"d-flex justify-content-between\">\n                {task.name}\n                <input type=\"checkbox\"\n                    checked={task.done}\n                    onChange={() => {\n                        toggleTask(task);\n                    }}\n                />\n            </td>\n        </tr>\n    )\n}","import { TaskRow } from \"./TaskRow\"\nimport React from \"react\"\n\nexport const TaskTable = ({ tasks, toggleTask, showCompleted = false }) => {\n\n    const taskTableRows = (doneValue) => {\n\n        return (\n            tasks\n                .filter(task => task.done === doneValue)\n                .map(task => (\n                    <TaskRow task={task} key={task.name} toggleTask={toggleTask} />\n                ))\n        )\n    }\n    return (\n        <table className=\"table table-dark table-striped table-bordered border-secondary\">\n            <thead>\n                <tr className=\"table-primary\">\n                    <th>Tasks</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    taskTableRows(showCompleted)\n                }\n            </tbody>\n        </table>\n    )\n}","import React from \"react\";\n\nexport const VisibilityControl = ({ isChecked, setShowCompleted, cleanTasks }) => {\n\n    const handleDelete = () => {\n        if (window.confirm('Are you sure you want to delete all completed tasks?')) {\n            cleanTasks();\n        }\n    }\n\n    return (\n        <div className=\"d-flex justify-content-between bg-secondary text-white text-center p-2 border-secondary\">\n            <div className=\"form-check form-switch\">\n                <input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    checked={isChecked}\n                    onChange={(e) => setShowCompleted(e.target.checked)}\n                />{''}\n                <label>Show Task Done</label>\n            </div>\n            <button onClick={handleDelete} className=\"btn btn-danger btn-sm\">\n                Clear\n            </button>\n        </div>\n    )\n}","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { TaskCreator } from './components/TaskCreator';\nimport { TaskTable } from './components/TaskTable';\nimport { VisibilityControl } from './components/VisibilityControl';\nimport React from 'react';\n\nfunction App() {\n\n  const [tasksItems, setTasks] = useState([]);\n  const [showCompleted, setShowCompleted] = useState(false);\n\n  function createNewTask(taskName) {\n    if (!tasksItems.find(task => task.name === taskName)) {\n      setTasks([...tasksItems, { name: taskName, done: false }]);\n    }\n  }\n\n  const toggleTask = task => {\n    setTasks(tasksItems.map(t => (t.name === task.name ? { ...t, done: !t.done } : t)));\n  }\n\n  useEffect(() => {\n    let data = localStorage.getItem(\"tasks\");\n    if (data) {\n      setTasks(JSON.parse(data));\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasksItems));\n  }, [tasksItems]);\n\n  const cleanTasks = () => {\n    setTasks(tasksItems.filter(task => !task.done));\n    setShowCompleted(false);\n  }\n\n  return (\n    <main className=\"bg-dark vh-100 text-white\">\n      <div className=\"container p-4 col-md-4 offset-md-4\">\n        <TaskCreator createNewTask={createNewTask} />\n        <TaskTable tasks={tasksItems} toggleTask={toggleTask} />\n\n        <VisibilityControl\n          isChecked={showCompleted}\n          setShowCompleted={(checked) => setShowCompleted(checked)}\n          cleanTasks={cleanTasks}\n        />\n        {\n          showCompleted === true && (\n            <TaskTable tasks={tasksItems} toggleTask={toggleTask} showCompleted={showCompleted} />\n          )\n        }\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <App />\n);\n"],"sourceRoot":""}